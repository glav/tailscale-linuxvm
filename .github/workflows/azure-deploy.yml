# This is a basic workflow to help you get started with Actions

name: DeployTailscaleVM

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  MainInfraDeploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      VMNAME: TLSCALEVM
      RESOURCEGROUP: tailscale-test
      IOTHUBNAME: tailscale-iot-hub
      IOTTESTDEVICENAME: testdevice
      ENABLEIOTHUBPUBLICACCESS: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: azure/login@v1
        name: 'Login to Azure'
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure
        uses: azure/powershell@v1
        with:
          inlineScript: |
            ./deploy.ps1 -AdminUserName ${{ secrets.AdminUserName }} -AdminUserPassword ${{ secrets.AdminUserPassword }} -ResourceGroup  ${{ env.RESOURCEGROUP}} -VmName ${{ env.VMNAME }} -IotHubName ${{ env.IOTHUBNAME }} -EnableIotHubAccess ${{ env.ENABLEIOTHUBPUBLICACCESS }}
          azPSVersion: "latest"

      # Should refactor these separate calls into one script to check for validity. support error handling etc
      - name: Install Tailscale on VM via AzCLI
        uses: azure/CLI@v1
        with:
          inlineScript: |
                az vm run-command invoke -g ${{ env.RESOURCEGROUP}} -n ${{ env.VMNAME }} --command-id RunShellScript --scripts "curl -fsSL https://tailscale.com/install.sh | sh"

      - name: Start Tailscale on VM using AuthKey
        uses: azure/CLI@v1
        with:
          inlineScript: |
                az vm run-command invoke -g ${{ env.RESOURCEGROUP}} -n ${{ env.VMNAME }} --command-id RunShellScript --scripts "tailscale up --authkey ${{ secrets.TAILSCALE_AUTH_KEY }} --advertise-routes=10.1.0.0/24,168.63.129.16/32 --accept-dns=false --advertise-exit-node"

      # This wont work when public access is disabled. Need to figure out a way to enable/disable public access programmatically.
      # - name: Create a test device in IoT hub
      #   uses: azure/CLI@v1
      #   with:
      #     inlineScript: |
      #           az config set extension.use_dynamic_install=yes_without_prompt
      #           az iot hub device-identity create -n "${{ env.IOTHUBNAME }}" -d "${{ env.IOTTESTDEVICENAME }}"
